name: Build and deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these deployments to complete.
concurrency:
  group: "netlify"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TYPST_RELEASE_URL: https://github.com/typst/typst/releases/latest/download/typst-x86_64-unknown-linux-musl.tar.xz
      TYPST_DIR_NAME: typst-x86_64-unknown-linux-musl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install basic tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xz-utils

      - name: Install Typst
        run: |
          curl -L "$TYPST_RELEASE_URL" -o typst.tar.xz
          tar -xf typst.tar.xz
          sudo mv "$TYPST_DIR_NAME/typst" /usr/local/bin/typst
          typst --version

      - name: Compile Typst to PDF
        run: |
          typst compile main.typ cheatsheet.pdf

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: cheatsheet-${{ github.run_id }}
          include-hidden-files: true
          path: cheatsheet.pdf

  deploy:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      issues: write
      pull-requests: write

    environment:
      name: netlify
      url: ${{ steps.deploy.outputs.deploy_url }}

    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: cheatsheet-${{ github.run_id }}
          path: .build

      - name: Setup Netlify CLI
        run: npm install -g netlify-cli

      - name: Install jq tool
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Deploy PDF to Netlify
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          echo "/ /cheatsheet.pdf 200" > .build/_redirects

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            netlify deploy \
              --dir .build \
              --message="Deploy preview for PR #${{ github.event.pull_request.number }}" \
              --alias="preview-${{ github.run_id }}" \
              --json > deploy.json
            DEPLOY_URL=$(jq -r '.deploy_url' deploy.json)
            BUILD_LOGS=$(jq -r '.logs' deploy.json)
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            netlify deploy \
              --dir .build \
              --message="Deploy (main branch)" \
              --prod \
              --json > deploy.json
            DEPLOY_URL=$(jq -r '.url // .deploy_url' deploy.json)
            BUILD_LOGS=$(jq -r '.logs' deploy.json)
          fi

          echo "deploy_url=${DEPLOY_URL}" >> "$GITHUB_OUTPUT"
          echo "build_logs=${BUILD_LOGS}" >> "$GITHUB_OUTPUT"

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        env:
          DEPLOY_URL: ${{ steps.deploy.outputs.deploy_url }}
          BUILD_LOGS: ${{ steps.deploy.outputs.build_logs }}
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = process.env.DEPLOY_URL;
            const buildLogs = process.env.BUILD_LOGS;
            const comment = `
              These are the latest changes:  
              **Deployment URL**: [Preview](${deployUrl})  
              **Build Logs**: [View deployment on netlify](${buildLogs})
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
